// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Member {
  id          Int      @id @default(autoincrement())
  email       String   @unique(map: "email") @db.VarChar(255)
  password    String   @db.VarChar(20)
  name        String   @db.VarChar(100)
  gender      String   @db.VarChar(15)
  birth       DateTime @db.Date
  address     String   @db.VarChar(255)
  specAddress String?  @map("spec_address") @db.VarChar(255)
  phoneNum    String   @map("phone_num") @db.VarChar(15)

  userFavorCategories MemberPrefer[]
  MemberMission       MemberMission[]
  review              Review[]

  @@map("member")
}

model FoodCategory {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  userFavorCategories MemberPrefer[]
  Store               Store[]

  @@map("food_category")
}

model MemberPrefer {
  id             Int          @id @default(autoincrement())
  member         Member       @relation(fields: [memberId], references: [id])
  memberId       Int          @map("member_id")
  foodCategory   FoodCategory @relation(fields: [foodCategoryId], references: [id])
  foodCategoryId Int          @map("category_id")

  @@index([foodCategoryId], map: "category_id")
  @@index([memberId], map: "member_id")
  @@map("member_prefer")
}

model Region {
  id   Int    @id @default(autoincrement())
  name String @db.VarChar(100)

  stores Store[]

  @@map("region")
}

model Store {
  id         Int          @id @default(autoincrement())
  region     Region       @relation(fields: [regionId], references: [id])
  regionId   Int          @map("region_id")
  category   FoodCategory @relation(fields: [categoryId], references: [id])
  categoryId Int          @map("category_id")
  name       String       @db.VarChar(100)
  address    String       @db.VarChar(100)
  score      Float        @db.Float
  imageUrl   String       @map("image_url") @db.Text

  missions    Mission[]
  review      Review[]
  ReviewImage ReviewImage[]

  @@index([regionId], map: "region_id")
  @@index([categoryId], map: "category_id")
  @@map("store")
}

model Mission {
  id          Int      @id @default(autoincrement())
  store       Store    @relation(fields: [storeId], references: [id])
  storeId     Int      @map("store_id")
  reward      Int      @db.Int
  deadline    DateTime @db.Date
  missionSpec String   @map("mission_spec") @db.Text

  memberMissions MemberMission[]

  @@index([storeId], map: "store_id")
  @@map("mission")
}

model MemberMission {
  id        Int     @id @default(autoincrement())
  mission   Mission @relation(fields: [missionId], references: [id])
  missionId Int     @map("mission_id")
  member    Member  @relation(fields: [memberId], references: [id])
  memberId  Int     @map("member_id")
  status    String  @db.VarChar(15)

  @@index([missionId], map: "mission_id")
  @@index([memberId], map: "member_id")
  @@map("member_mission")
}

model Review {
  id       Int    @id @default(autoincrement())
  member   Member @relation(fields: [memberId], references: [id])
  memberId Int    @map("member_id")
  store    Store  @relation(fields: [storeId], references: [id])
  storeId  Int    @map("store_id")
  body     String @db.Text
  score    Float  @db.Float

  ReviewImage ReviewImage[]

  @@index([memberId], map: "member_id")
  @@index([storeId], map: "store_id")
  @@map("review")
}

model ReviewImage {
  id       Int    @id @default(autoincrement())
  store    Store  @relation(fields: [storeId], references: [id])
  storeId  Int    @map("store_id")
  review   Review @relation(fields: [reviewId], references: [id])
  reviewId Int    @map("review_id")
  imageUrl String @map("image_url") @db.Text

  @@index([reviewId], map: "review_id")
  @@index([storeId], map: "store_id")
  @@map("review_image")
}
